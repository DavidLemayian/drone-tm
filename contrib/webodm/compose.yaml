networks:
  net:

volumes:
  certs:
  odm-media:
  odm-db-data:

services:
  traefik:
    image: docker.io/traefik:v3.4.3
    container_name: traefik
    volumes:
      - certs:/letsencrypt
      # We run rootless as user 1000!
      - /var/run/user/1000/docker.sock:/var/run/user/1000/docker.sock:ro
    networks:
      - net
    labels:
      traefik.enable: "false" # no dashboard
    ports:
      - "80:80"
      - "443:443"
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.endpoint=unix:///var/run/user/1000/docker.sock"
      - "--entrypoints.http=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.http.http.redirections.entrypoint.to=https"
      - "--entrypoints.http.http.redirections.entrypoint.scheme=https"
      - "--entryPoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # For staging test
      # - "--certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.letsencrypt.acme.email=sysadmin@hotosm.org"
      - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
    restart: unless-stopped

  # This container does the actual imagery processing (not persistent, scalable)
  odm-api:
    image: docker.io/opendronemap/nodeodm:3.5.5
    # This is hardcoded by default
    hostname: webodm-node-odm-1
    container_name: odm-api
    networks:
      - net
    restart: unless-stopped
    oom_score_adj: 500

  # UI to coordinate queueing of tasks and display of output
  odm-web:
    image: docker.io/opendronemap/webodm_webapp:2.8.3
    container_name: odm-web
    entrypoint: /bin/bash -c "chmod +x /webodm/*.sh && /bin/bash -c \"/webodm/wait-for-postgres.sh odm-db /webodm/wait-for-it.sh -t 0 odm-broker:6379 -- /webodm/start.sh\""
    volumes:
      - odm-media:/webodm/app/media:z
    depends_on:
      odm-worker:
        condition: service_started
    env_file:
      - .env
    networks:
      - net
    restart: unless-stopped
    oom_score_adj: 0
    labels:
      traefik.enable: "true"
      traefik.http.routers.webodm.rule: "Host(`${WO_HOST:-webodm.dronetm.hotosm.org}`)"
      traefik.http.routers.webodm.entrypoints: https
      traefik.http.routers.webodm.tls: "true"
      traefik.http.routers.webodm.tls.certresolver: letsencrypt
      traefik.http.services.webodm.loadbalancer.server.port: "8000"

  # Instance of WebODM that uses Celery to manage processing jobs
  odm-worker:
    image: docker.io/opendronemap/webodm_webapp:2.8.3
    container_name: odm-worker
    entrypoint: /bin/bash -c "/webodm/wait-for-postgres.sh odm-db /webodm/wait-for-it.sh -t 0 odm-broker:6379 -- /webodm/wait-for-it.sh -t 0 odm-web:8000 -- /webodm/worker.sh start"
    volumes:
      - odm-media:/webodm/app/media:z
    depends_on:
      odm-db:
        condition: service_started
      odm-broker:
        condition: service_started
    env_file:
      - .env
    networks:
      - net
    restart: unless-stopped
    oom_score_adj: 250

  # Redis broker to manage job queue
  odm-broker:
    image: docker.io/redis:8.0.0
    container_name: odm-broker
    networks:
      - net
    restart: unless-stopped
    oom_score_adj: -500

  # Stores data related to the web instance & queueing
  odm-db:
    image: docker.io/opendronemap/webodm_db:latest
    container_name: odm-db
    volumes:
      - odm-db-data:/var/lib/postgresql/data:Z
    ports:
      - 5999:5432
    networks:
      - net
    restart: unless-stopped
    oom_score_adj: -100
